!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!kaggle datasets download -d paridiparidi/food101
import zipfile
!unzip /content/food101.zip
from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_dir="/content/food-101/images"
import tensorflow as tf
IMG_SIZE = (224, 224)
BATCH_SIZE = 32
train_data_10_percent = tf.keras.preprocessing.image_dataset_from_directory(directory=train_dir,
                                                                            image_size=IMG_SIZE,
                                                                            label_mode="categorical",
                                                                            batch_size=BATCH_SIZE)
import tensorflow as tf
base=tf.keras.applications.EfficientNetB0(include_top=False)
base.trainable=False
inputs=tf.keras.layers.Input((224,224,3))
x=base(inputs,training=False)
x=tf.keras.layers.GlobalAvgPool2D()(x)
outputs=tf.keras.layers.Dense(101,activation="softmax")(x)
model1=tf.keras.Model(inputs,outputs)
model1.compile(loss="categorical_crossentropy",optimizer="adam",metrics=["accuracy"])
model1.fit(train_data_10_percent,epochs=5)
class_names=train_data_10_percent.class_names
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
img=mpimg.imread("/content/images (4).jpeg")
plt.imshow(img)
import numpy as np
image = tf.keras.utils.load_img('/content/images (4).jpeg',target_size=(224,224))
input_arr = tf.keras.utils.img_to_array(image)
input_arr = np.array([input_arr])
preds=model1.predict(input_arr).argmax()
plt.imshow(img)
plt.title(class_names[preds])
import openai
openai.api_key="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"
def get_completion(prompt, model="gpt-3.5-turbo"):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0, # this is the degree of randomness of the model's output
    )
    return response.choices[0].message["content"]

def get_completion_from_messages(messages, model="gpt-3.5-turbo", temperature=0):
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature, # this is the degree of randomness of the model's output
    )
#     print(str(response.choices[0].message))
    return response.choices[0].message["content"]
def collect_messages(_):
    prompt = inp.value_input
    inp.value = ''
    context.append({'role':'user', 'content':f"{prompt}"})
    response = get_completion_from_messages(context) 
    context.append({'role':'assistant', 'content':f"{response}"})
    panels.append(
        pn.Row('User:', pn.pane.Markdown(prompt, width=600)))
    panels.append(
        pn.Row('Assistant:', pn.pane.Markdown(response, width=600, style={'background-color': '#F6F6F6'})))
 
    return pn.Column(*panels)

text = f"""
You are a calorie counter, when inputed an image name /
your job is to output the calorie count of the food item in the image
"""
prompt = f"""
Summarize the text delimited by triple backticks \ 
into a single sentence.
```{preds}```
"""
response = get_completion(prompt)
print(response)
